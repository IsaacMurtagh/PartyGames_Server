AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  "Party games Rest Api"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment for deploying
  GamesTableParam:
    Type: String
    Default: Games
    AllowedValues:
      - Games
    Description: The name of the database table for games
  UsersTableParam:
    Type: String
    Default: Users
    AllowedValues:
      - Users
    Description: The name of the database table for users

Mappings:
  EnvironmentMap:
    dev:
      gamesTable: games-dev
      usersTable: users-dev
      connectionsTable: connections-dev
    prod:
      gamesTable: games-prod
      usersTable: users-prod
      connectionsTable: connections-prod

Globals:
  Function:
    Timeout: 5
    Runtime: nodejs14.x
    Environment:
      Variables:
          USERS_TABLE_NAME: !FindInMap [ EnvironmentMap, !Ref "Environment", usersTable ]
          GAMES_TABLE_NAME: !FindInMap [ EnvironmentMap, !Ref "Environment", gamesTable ]
          CONNECTIONS_TABLE_NAME: !FindInMap [ EnvironmentMap, !Ref "Environment", connectionsTable ]
  Api:
    Cors: "'*'"

Resources:
  # -- Layers --
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/_layers/common
      RetentionPolicy:  Delete
    Metadata:
      BuildMethod: nodejs14.x

  # -- WEB SOCKETS --
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleChatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    - StartGameRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: api
      Description: api stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/onConnect
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Layers:
        - Ref: CommonLayer
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", connectionsTable ]
      - DynamoDBCrudPolicy:
          TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", usersTable ]
      - DynamoDBCrudPolicy:
          TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", gamesTable ]
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/onDisconnect
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Layers:
        - Ref: CommonLayer
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", connectionsTable ]
      - DynamoDBCrudPolicy:
          TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", gamesTable ]
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  StartGameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: startgame
      AuthorizationType: NONE
      OperationName: StartGameRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref StartGameInteg

  StartGameInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Start Game Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartGameFunction.Arn}/invocations

  StartGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/startGame
      Handler: app.handler
      MemorySize: 256
      Timeout: 100
      Runtime: nodejs12.x
      Layers:
        - Ref: CommonLayer
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", connectionsTable ]
      - DynamoDBCrudPolicy:
          TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", gamesTable ]
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'

  StartGamePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartGameFunction
      Principal: apigateway.amazonaws.com
  
  # -- REST API --
  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Party Games Api Gateway
      StageName: api

  GameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/game
      Handler: app.handler
      Layers:
        - Ref: CommonLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", usersTable ]
        - DynamoDBCrudPolicy:
            TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", gamesTable ]
      Events:
        GetGameApi:
          Type: Api
          Properties:
            RestApiId: 
              Ref: 'RestApiGateway'
            Path: /games/{gameId}
            Method: get
        CreateGameApi:
          Type: Api
          Properties:
            RestApiId: 
              Ref: 'RestApiGateway'
            Path: /games
            Method: post

  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/user
      Handler: app.handler
      Runtime: nodejs14.x
      Layers:
        - Ref: CommonLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", usersTable ]
      Events:
        GetUserApi:
          Type: Api
          Properties:
            RestApiId: 
              Ref: 'RestApiGateway'
            Path: /users/{id}
            Method: get
        CreateUserApi:
          Type: Api
          Properties:
            RestApiId: 
              Ref: 'RestApiGateway'
            Path: /users
            Method: post
  
  RoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/round
      Handler: app.handler
      Layers:
        - Ref: CommonLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", usersTable ]
        - DynamoDBCrudPolicy:
            TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", gamesTable ]
      Events:
        MakeRoundChoiceApi:
          Type: Api
          Properties:
            RestApiId: 
              Ref: 'RestApiGateway'
            Path: /games/{gameId}/round/{roundNumber}
            Method: post

  # -- DATABASE TABLES --
  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", gamesTable ]
      Tags:
        - Key: Party_games_env
          Value: !Ref "Environment"
      AttributeDefinitions: 
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema: 
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", usersTable ]
      Tags:
        - Key: Party_games_env
          Value: !Ref "Environment"
      AttributeDefinitions: 
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema: 
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !FindInMap [ EnvironmentMap, !Ref "Environment", connectionsTable ]
      Tags:
        - Key: Party_games_env
          Value: !Ref "Environment"
      AttributeDefinitions: 
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: connectionId
          AttributeType: S
      KeySchema: 
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: 'connectionId-index'
          KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          Projection:
            ProjectionType: 'ALL'
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      StreamSpecification:
        StreamViewType: NEW_IMAGE

Outputs:
  Api:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${RestApiGateway}.execute-api.${AWS::Region}.amazonaws.com/api"

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Sub "wss://${SimpleChatWebSocket}.execute-api.${AWS::Region}.amazonaws.com/api"
